package org.tedu.cloudnote.service;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.tedu.cloudnote.dao.NoteDao;
import org.tedu.cloudnote.dao.ShareDao;
import org.tedu.cloudnote.entity.Note;
import org.tedu.cloudnote.entity.Share;
import org.tedu.cloudnote.util.NoteResult;
import org.tedu.cloudnote.util.NoteUtil;

@Service("noteService")
@Transactional//该组件每个方法都采用事务控制
public class NoteServiceImpl implements NoteService {
	@Resource
	NoteDao noteDao;
	@Resource
	ShareDao shareDao;
	/**
	 * 通过笔记本ID查找笔记本内所属的笔记
	 */
	public NoteResult loadBookNotes(String bookId) {
		NoteResult result = new NoteResult();
		List<Note> list = noteDao.findByBookId(bookId);
		result.setStatus(0);
		result.setMsg("查询笔记成功");
		result.setData(list);
		return result;
	}
	/**
	 * 通过笔记id查找单一笔记
	 */
	public NoteResult loadNote(String noteId) {
		NoteResult result = new NoteResult();
		Note note = noteDao.findByNoteId(noteId);
		result.setStatus(0);
		result.setMsg("加载笔记内容成功");
		result.setData(note);
		return result;
	}
	/**
	 * 保存笔记的修改
	 */
	//@Transactional//表示方法中的SQL一起成功或一起撤销
	public NoteResult updateNote(String title, String body, String noteId) {
		NoteResult result = new NoteResult();
		Note note = noteDao.findByNoteId(noteId);
		//如果内容和原有的内容不变直接返回
		if(note.getCn_note_title().equals(title)&&note.getCn_note_body().equals(body)){
			result.setStatus(1);
			result.setMsg("未更新内容");
			return result;
		}
	
	
//		Share share = shareDao.findByNoteId(noteId);
//		//检查是否分享，如果分享
//		if(share!=null){
//			//修改分享表的内容
//			share.setCn_share_title(title);
//			share.setCn_share_body(body);
//			shareDao.updateShare(share);
//		}
		Share share = new Share();
		share.setCn_note_id(noteId);
		share.setCn_share_body(body);
		share.setCn_share_title(title);
		shareDao.updateShare(share);
		
		//修改后返回
		note.setCn_note_title(title);
		note.setCn_note_body(body);
		note.setCn_note_last_modify_time(System.currentTimeMillis());
		noteDao.updateNote(note);
		result.setStatus(0);
		result.setMsg("修改成功");
		return result;
	}
	/**
	 * 新增笔记
	 */
	public NoteResult saveNote(String userId, String bookId, String name) {
		NoteResult result = new NoteResult();
		Note note = new Note();
		//笔记id
		String noteId = NoteUtil.createId();
		note.setCn_note_id(noteId);
		note.setCn_notebook_id(bookId);//笔记本Id
		note.setCn_user_id(userId);//用户Id
		note.setCn_note_status_id("1");
		note.setCn_note_type_id("1");
		note.setCn_note_title(name);//笔记标题
		note.setCn_note_body("");
		note.setCn_note_create_time(System.currentTimeMillis());
		note.setCn_note_last_modify_time(System.currentTimeMillis());
		//保存
		noteDao.saveNote(note);
		result.setStatus(0);
		result.setMsg("新增笔记成功");
		result.setData(noteId);
		return result;
	}
	/**
	 * 删除笔记至回收站
	 */
	public NoteResult recycleNote(String noteId) {
		NoteResult result = new NoteResult();
		Map<String,Object> map = new HashMap<String,Object>();
		map.put("statusId", "2");
		map.put("noteId", noteId);
		//更新笔记信息
		noteDao.updateStatus(map);
		//TODO 删除分享内容
		result.setStatus(0);
		result.setMsg("删除成功");
		return result;
	}
	/**
	 * 移动笔记至其他笔记本
	 */
	public NoteResult moveNote(String noteId, String bookId) {
		NoteResult result = new NoteResult();
		Map<String,Object> map = new HashMap<String,Object>();
		map.put("bookId", bookId);
		map.put("noteId", noteId);
		//更新笔记所属笔记本
		noteDao.updateBookId(map);
		result.setStatus(0);
		result.setMsg("移动成功");
		return result;
	}
	/**
	 * 查看用户的回收站
	 * @param userId 用户Id
	 * @return
	 */
	public NoteResult recycleList(String userId) {
		NoteResult result = new NoteResult();
		result.setStatus(1);
		result.setMsg("获取回收站列表失败");
		List<Note> list = new ArrayList<Note>();
		if(userId != null && !"".equals(userId)){
			list = noteDao.findByRecycle(userId);
			result.setStatus(0);
			result.setMsg("获取回收站列表成功");
			result.setData(list);
		}
		return result;
	}
	/**
	 * 查看用户收藏的笔记
	 * @param userId
	 * @return
	 */
	public NoteResult loadFavorList(String userId) {
		NoteResult result = new NoteResult();
		result.setStatus(1);
		result.setMsg("获取收藏列表失败");
		List<Note> list = new ArrayList<Note>();
		if(userId != null && !"".equals(userId)){
			list = noteDao.findByFavor(userId);
			result.setStatus(0);
			result.setMsg("获取收藏列表成功");
			result.setData(list);
		}
		return result;
	}

}
